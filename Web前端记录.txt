1. Html模板
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title></title>
</head>
<body>
</body>
</html>

2. Html引入css、js文件
<link type="text/css" href="" rel="stylesheet">
<script type="text/javascript" src=""></script>

3. js内置类型
空类型：null；
未定义类型：undefined；
布尔类型：Boolean；
数字类型：Number;
对象：Object；
字符类型：string；
符号:symbol (ES6新增)

4. 类型转换
toString()  转化为字符串，不可以转null和undefined
Number()    转换为数字，字符串中有一个不是数值的字符，返回NaN
parseInt()  转换为数字，第一个字符不是数字或者符号就返回NaN
String()    转换为字符串
Boolean()   转换为布尔值

5.可重定义 this 这个对象的方法
call()、apply()、bind() 

6. Cookie属性
name　　        字段为一个cookie的名称。
value　　       字段为一个cookie的值。
domain　        字段为可以访问此cookie的域名。
path　          字段为可以访问此cookie的页面路径。 比如domain是abc.com,path是/test，那么只有/test路径下的页面可以读取此cookie。
expires/Max-Age 字段为此cookie超时时间。若设置其值为一个时间，那么当到达此时间后，此cookie失效。不设置的话默认值是Session，意思是cookie会和session一起失效。
                当浏览器关闭(不是浏览器标签页，而是整个浏览器) 后，此cookie失效。
Size　　        字段 此cookie大小。
http　      　  字段  cookie的httponly属性。若此属性为true，则只有在http请求头中会带有此cookie的信息，而不能通过document.cookie来访问此cookie。
secure　　      字段 设置是否只能通过https来传递此条cookie

secure属性：
当设置为true时，表示创建的 Cookie 会被以安全的形式向服务器传输，也就是只能在 HTTPS 连接中被浏览器传递到服务器端进行会话验证，如果是 HTTP 连接则不会传递该信息，所以不会被窃取到Cookie 的具体内容。
HttpOnly属性：
如果在Cookie中设置了"HttpOnly"属性，那么通过程序(JS脚本、Applet等)将无法读取到Cookie信息，这样能有效的防止XSS攻击。
Expire属性：
设置Cookie的失效时间

7. 检验是否为数组
方法一： instanceof:
var arr=[];
console.log(arr instanceof Array) //返回true
方法二： constructor:
console.log(arr.constructor == Array); //返回true
方法三： Array.isArray()
console.log(Array.isArray(arr)); //返回true

line-height 行间间距

8. 普通表格模板
<table>
    <!-- 表头 -->
    <thead>
        <!-- 行 -->
        <tr>
            <!-- 列 -->
            <th></th>
         </tr>
    </thead>
    <!-- 表内容 -->
    <tbody></tbody>
    <!-- 表页脚 -->
    <tfoot></tfoot>
</table>

9. forEach()
array.forEach(function(currentValue, index, arr), thisValue);

10. Object.defineproperty()在一个对象上定义一个新属性，或者修改一个对象的现有属性
Object.defineProperty(obj, prop, descriptor)
obj；要定义属性的对象。
prop;要定义或修改的属性的名称
descriptor:要定义或修改的属性描述符
let infornation = {
        'name': '小红',
        'age': 23
    }
Object.defineProperty(infornation, age, {
value:23,//JavaScript 值
enumerable:true,//控制属性是否可枚举，默认为flase
writable:true,//控制属性是否可被修改，默认为flase
configurable:true,//控制属性是否可被删除，默认为flase
 //当有人读取infornation的sex属性时，此函数就会被调用
    get() {
        return;
    },
    //当有人修改infornation的sex属性时，此函数就会被调用
    set(value) {

    }
})

11. 数据代理
需求 obj1 下有属性 x ,如何通过 obj2 修改 obj1.x？
let obj1={'x':100}
let obj2={};
Object.defineProperty(obj2,'x',{
    get(){
        return obj1.x;
    },
    set(value){
       return obj1.x=value;
    }
});

10. Vue 模板
let vm = new Vue({
    'el': '#app',
    data: {
        'age': 20,
        'firstName': '张',
        'lastName': '三'，
        'isHot': true
    },
    //方法
    methods: {
        showInfo(e) {
            console.log(e.keyCode);
            console.log('dsd');
        }
    },
    //计算属性
    computed: {
        fullname: {
            //1.有人读取fullname时，get就会被调用，且返回值就作为fullname的值
            //2.初次读取fullname调用
            get() {
                return this.firstName + this.lastName
            },
            //当fullname被修改时调用
            set(value) {

            }
        }
    },
    //实例被挂载后调用（初始化页面完成后，对dom节点进行相关操作）
    mounted: function() {
        document.querySelector('button').focus();
    }，
        //监听
    watch: {
        isHot: {
            immediate: true, //初始化是让handler调用一下
            deep:true,//深度监听，监听多级结构值
            //当isHot发生变化时,newValue(变化后的值)，oldVule(变化前的值)
            handler(newValue, oldVule) {

            }
        }
        //调用API监听
        //vm.$watch('isHot', function (newVal, oldVal) {
        //做点什么
        //})
    }，
    //过滤器
    filters{

    },
    //自定义指令
    directives{
        focus:{
            inserted (el,binding){
        }
        }
       
    }
});

11. Vue生命周期
vm的一生
将要创建 ==> 调用 beforeCreate 函数
创建完毕 ==> 调用 created 函数
将要挂载 ==> 调用 beforeMount 函数
挂载完毕 ==> 调用 mounted 函数
将要更新 ==> 调用 beforeUpdate 函数
更新完毕 ==> 调用 updated 函数
将要销毁 ==> 调用 beforeDestroy 函数
创建完毕 ==> 调用 destroyed 函数
new Vue({
    'el': '#app',
    'data': {},
    //初始化生命周期、事件完成,但代理数据还未开始
    beforeCreate() {

    },
    //初始化数据监测、数据代理完成
    created() {

    },
    //页面呈现未经Vue编译到DMO结构（Vue已生成虚拟DMO 在内存中），D对MO的操作，最终都不奏效
    beforeMount() {

    },
    mounted() {

    },
    //页面是旧的，但数据是新的
    beforeUpdate() {

    },
    //页面是新的，数据也是新的
    updated() {

    },
    //销毁vm实例前，在此周期一般进行关闭定时器、取消订阅信息、解除绑定自定义事件等收尾操作
    beforeDestroy() {

    },
    //销毁vm实例
    destroyed() {

    }
});

12. Vue组件
步骤：1. 创建组件 2. 注册组件 3. 使用组件
使用 Vue.extend 创建
const weather = Vue.extend({
    'template': `<div>天气<span>{{hot}}</span></div>`,
    'data': function() {
        return {
            hot: '热'
        }
    }
});
使用 components 注册组件
局部注册
const vm = new Vue({
    'el': '#app',
    'components': {
        weather
    }
})
全局注册
Vue.component('weather', Vue.extend({ /* ... */ }))
使用组件
<body>
    <div id="app">
        <weather></weather>
    </div>
</body>

13. 数组原生方法
pop、push、shift、unshift、foreach、map、filte、slice、splic、sort、reverse、some、every、reducce、concat、join、indexOf、lastIndexOf

14. 安装 vue 脚手架
第一步：全局安装@vue/cli
npm install -g @vue/cli
第二步：切换到你要创建项目的目录，然后使用命令创建项目
vue create '项目名称'
第三步：启动项目 （到创建的项目目录下）
npm run serve

查看webpack配置
vue inspect > output.js

Local:   http://localhost:8080/
Network: http://192.168.1.3:8080/

15.实现水平垂直居中
方法一：父元素设置：display:flex; justify-content:center; align-items:center
方法二：父元素设置弹性盒display:flex; 子元素可以设置margin: auto;

15. vue路由守卫
全局路由守卫
//全局前置守卫
router.beforeResolve(function(to,from,next){

})
//全局后置守卫
router.afterEach((to, from) => {

})

路由独享守卫
beforeEnter:function(to, from){

}

组件守卫
const UserDetails = {
  template: `...`,
  //通过路由规则，进入该组件时被调用
  beforeRouteEnter(to, from) {
    // 在渲染该组件的对应路由被验证前调用
    // 不能获取组件实例 `this` ！
    // 因为当守卫执行时，组件实例还没被创建！
  },
  beforeRouteUpdate(to, from) {
    // 在当前路由改变，但是该组件被复用时调用
    // 举例来说，对于一个带有动态参数的路径 `/users/:id`，在 `/users/1` 和 `/users/2` 之间跳转的时候，
    // 由于会渲染同样的 `UserDetails` 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。
    // 因为在这种情况发生的时候，组件已经挂载好了，导航守卫可以访问组件实例 `this`
  },
  //通过路由规则，离开该组件时被调用
  beforeRouteLeave(to, from) {
    // 在导航离开渲染该组件的对应路由时调用
    // 与 `beforeRouteUpdate` 一样，它可以访问组件实例 `this`
  },
}

16. vuex环境搭建
import Vue from 'vue'
import Vuex from 'vuex'
Vue.use(Vuex);
//该文件用于创建VUEX中最为核心的stroe

//准备actions 用于响应组件中的动作
const actions = {

}

//准备mutations 用于操作数据
const mutations = {

}

//准备state 用于存储数据
const state = {

}

const store = new Vuex.Store({
    actions,
    mutations,
    state
})

export default store 

 
17. flex布局
 容器中指定Flex布局
 .box{
    display:flex;
 }
 行内指定Flex布局
 .box{
    display:inline-flex;
 }

 容器六个属性设置
 1. flex-direction:决定容器内多个div的排列方向
 .box {
  flex-direction: row | row-reverse | column | column-reverse;
 }
 水平
 row:从左至右排列
 row-reverse:从右至左排列
 垂直
 column:从上往下排列
 column-reverse:从下往上排列
 
 2. flex-wrap: 决定一条水平轴上排不下,如何换行
 .box{
   flex-wrap: nowrap | wrap | wrap-reverse;
 }
 nowrap:不换行
 wrap:换行,第一行在上方
 wrap-reverse:换行,第一行在下方

 3. flex-flow: flex-direction 属性和 flex-wrap 属性的简写形式，默认值为row nowrap。
 
 4. justify-content:决定在主轴上的对齐方式
 .box {
  justify-content: flex-start | flex-end | center | space-between | space-around;
 }
 flex-start（默认值）：左对齐
 flex-end：右对齐
 center： 居中
 space-between：两端对齐，项目之间的间隔都相等。
 space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。

 5. align-items
 .box {
   align-items: flex-start | flex-end | center | baseline | stretch;
 }
 交叉轴->容器top至容器bottom(头部至底部)
 flex-start：交叉轴的起点对齐。
 flex-end：交叉轴的终点对齐。
 center：交叉轴的中点对齐。
 baseline: 项目的第一行文字的基线对齐。
 stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。

 6. align-content:属性定义了多根轴线的对齐方式

 行内六个属性
 1. order:定义行内排列顺序.数值越小越靠前
 .item {
   order: <integer>;
 }

 2. flex-grow:定义行内内容放大比例
 .item {
   flex-grow: <number>; /* default 0 */
 }

 3. flex-shrink:定义行内内容缩小比例
 .item {
  flex-shrink: <number>; /* default 1 */
 }

 4. flex-basis

 5. flex:属性是 flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。

 6. align-self

18. 格式化日期方法 
 function getDate(type,dateNum){
  var date;
  if(dateNum === ''){
    return '';
  }
  if(dateNum!=null){
    date = new Date(dateNum);
  }else{
    date = new Date();
  }
  var Y = date.getFullYear();
  var M = date.getMonth()+1 > 9?date.getMonth()+1:'0'+parseInt(date.getMonth()+1);
  var D = date.getDate()>9?date.getDate():'0'+date.getDate();
  var week = ['日','一','二','三','四','五','六'][date.getDay()];
  var H = date.getHours()>9?date.getHours():'0'+date.getHours();
  var m = date.getMinutes()>9?date.getMinutes():'0'+date.getMinutes();
  var s = date.getSeconds()>9?date.getSeconds():'0'+date.getSeconds();
  var time = '';
  if(type == 1){
    time = Y+'-'+M+'-'+D;
  }else if(type == 2){
    time = Y+'-'+M+'-'+D+' '+H+':'+m+':'+s;
  }else if(type == 3){
    time = Y+'-'+M;
  }else if(type == 4){
    time = Y+'-'+M+'-'+D+' '+H+':'+m;
  }else{
    time = Y+' 年 '+M+' 月 '+D+' 日 &nbsp;&nbsp;&nbsp; 星期'+week;
  }
  return time;
}

19. 推算往前几天或退后几天的日期
 //获取往前推的日期，// type = d,num 为往前推几天；// type = w,num 为往前推几周；// type = m,num 为往前推几月； this.$getDate此方法为(18)格式化时间方法
 export function getDatePrev (type,num){
  var time = '';
  if(num===''||num===undefined||num===null){
    return '';
  }
  if(type === 'd'){
    time = this.$getDate(1,new Date().getTime() - num * 24 *60 *60 * 1000);
  }else if(type === 'w'){
    time = this.$getDate(1,new Date().getTime() - num * 7 * 24 *60 *60 * 1000);
  }else if(type === 'm'){
    time = this.$getDate(1,new Date().getTime() - num * 30 * 24 *60 *60 * 1000);
  }

  return time;
}

20. 数字转中文 例如:1->一 2->二
 function numToChinese(num) {
  let numArr = ["零","一","二","三","四","五","六","七","八","九"];
  let numLimit = ["亿","万",""];//设置数字上限
  let numUnit = ["千","百","十",""];
  //num四位数是一个阶段对应 numLimit 每个阶段对应一个 numUnit，每个数字对应numArr。
  num = num.toString();
  num = num.split('');
  while (num.length < numLimit.length*4){
    num.unshift('');
  }
  // console.log(num)
  let numLength = num.length;
  let str = "";
  let limit = Math.ceil(numLength/4);
  // console.log(limit)
  for(let i = 1;i <= limit;i++){
    let start = (i -1) * 4;
    let end = i * 4;
    let limitNum = num.slice(start,end);
    // console.log(limitNum)
    for(let j = 0;j <limitNum.length ;j++){
      if(limitNum[j]!==''){
        let char = numArr[limitNum[j]];
        let unit = numUnit[j];
        if(limitNum[j] == 0){
          unit = '';
        }
        str += char+unit;
      }
    }
    let hasValue = limitNum.filter(val=>{
      return val!=='';
    });
    str = str.replace(/(零{2,})/,'零');//中间超过两个零替换为一个零
    if(str!=='零'){
      str = str.replace(/(零*)$/,'');//结尾去掉零
    }
    if(hasValue.length > 0){
      str+=numLimit[i-1];
    }
  }

  str = str.replace(/^一十/,'十');
  return str;
}

21. vue $event获取当前Dmo元素
 e.currentTarget;//绑定事件的元素
 e.currentTarget.children//绑定事件的子元素
 e.srcElement.style.background="red";//可以对获取的元素进行操作
 e.currentTarget.previousElementSibling.innerHTML;//获得点击元素的前一个元素
 e.currentTarget.firstElementChild;//获得点击元素的第一个子元素
 e.currentTarget.nextElementSibling;//获得点击元素的下一个元素
 e.currentTarget.getElementById("string");//获得点击元素中id为string的元素
 e.currentTarget.getAttributeNode('string');//获得点击元素的string属性
 e.currentTarget.parentElement;//获得点击元素的父级元素
 e.currentTarget.previousElementSibling.firstElementChild.innerHTML;//获得点击元素的前一个元素的第一个子元素的HTML值

22.父组件访问子组件方法 
方法一
this.$refs['子组件'].子组件方法名；
方法二
或 通过组件的$emit、$on方法
父组件：this.$refs['子组件'].$emit("子组件方法名")

23.子组件访问父组件方法
方法一
this.$partent.父组件方法名
方法二
在子组件中通过用$emit触发父组件中的方法
方法三
父组件把方法传入子组件中，子组件即可直接调用

24.兄弟组件之间传值
方法一
通过借用中央事件总线bus
在外部建立Bus.js文件，Bus.js文件中实例化vue，然后兄弟组件分别引入Bus.js文件，
例:
兄弟组件A监听方法send
Bus.$on('send',(data)=>{})
兄弟组件B触发方法send
Bus.$emit('send',(data)=>{})
方法二
在main.js，vue原型上添加Bus对象
Vue.prototype.bus=new Vue();
兄弟组件A监听方法send
this.bus.$on('send',function(data){})
兄弟组件B触发方法send
this.bus.$emit('send',data)

//解决两个数相加精度丢失问题
export function floatsum(a,b){
  if(a==undefined){return}
  if(b==undefined){return}
  if(a==0){a='0'}
  if(b==0){b='0'}
  let c = 0,d = 0,
    e = a.toString(),
    f = b.toString();
  // console.log(e)
  // console.log(f)
  try {
    c += e.split(".")[1].length;
  } catch (f) {
    // console.log(f)
  }
  try {
    d += f.split(".")[1].length;
  } catch (f) {
    // console.log(f)
  }

  let jd = c > d?c:d;
  // console.log(c)
  // console.log(e)
  // console.log(f)
  if(jd > 0){
    let numstr1 = e.replace(".", "")+`${Math.pow(10, (jd-c)).toString().slice(1)}`;
    let numstr2 = f.replace(".", "")+`${Math.pow(10, (jd-d)).toString().slice(1)}`;
    return (Number(numstr1) + Number(numstr2)) / Math.pow(10,jd);
  }else{
    return Number(e)+Number(f);
  }
  // return parseFloat(((e * Math.pow(10, c)) + (f *Math.pow(10, c)))/Math.pow(10, c));
}

/**解决两个数相乘精度丢失问题*/
export function floatMul(a, b) {
  if(a==undefined){return}
  if(b==undefined){return}
  if(a==0){a='0'}
  if(b==0){b='0'}
  var c = 0,
    d = a.toString(),
    e = b.toString();
  try {
    c += d.split(".")[1].length;
  } catch (f) {
    // console.log(f)
  }
  try {
    c += e.split(".")[1].length;
  } catch (f) {
    // console.log(f)
  }
  return Number(d.replace(".", "")) * Number(e.replace(".", "")) / Math.pow(10, c);
}
/**解决两个数相除精度丢失问题*/
export function floatDiv(arg1, arg2) {
  var r1 = arg1.toString(),
    r2 = arg2.toString(),
    m, resultVal, d = arguments[2];
  m = (r2.split(".")[1] ? r2.split(".")[1].length : 0) - (r1.split(".")[1] ? r1.split(".")[1].length : 0);
  resultVal = Number(r1.replace(".", "")) / Number(r2.replace(".", "")) * Math.pow(10, m);
  return typeof d !== "number" ? Number(resultVal) : Number(resultVal.toFixed(parseInt(d)));
}
/**解决两个数相减精度丢失问题*/
export function floatSub(arg1, arg2) {
  var r1, r2, m, n;
  try {
    r1 = arg1.toString().split(".")[1].length
  }
  catch (e) {
    r1 = 0
  }
  try {
    r2 = arg2.toString().split(".")[1].length
  }
  catch (e) {
    r2 = 0
  }
  m = Math.pow(10, Math.max(r1, r2))
  n=(r1>=r2)?r1:r2;
  return ((arg1*m-arg2*m)/m)
}

//日期格式化
function (dateStr,fmt){
  //防止2021-05-13T16:00:00.000Z格式包含000Z出现问题
  // date=new Date(date.toISOString().replace(/T/g, ' ').replace(/\.[\d]{3}Z/, ''));
  if(!dateStr)return '';
  let date = new Date(dateStr);

  if(date.toString()==='Invalid Date'){
    if(dateStr.toString().indexOf('-') > -1){
      date = new Date(dateStr.toString().replace(/-/g,'/'));
    }else{
      return '';
    }
  }

  var o = {
    "M+" : date.getMonth()+1, //月份
    "d+" : date.getDate(), //日
    "h+" : date.getHours()%12 == 0 ? 12 : date.getHours()%12, //小时
    "H+" : date.getHours(), //小时
    "m+" : date.getMinutes(), //分
    "s+" : date.getSeconds(), //秒
    "q+" : Math.floor((date.getMonth()+3)/3), //季度
    "S" : date.getMilliseconds() //毫秒
  };
  if(/(y+)/.test(fmt))
    fmt=fmt.replace(RegExp.$1, (date.getFullYear()+"").substr(4 - RegExp.$1.length));
  for(var k in o)
    if(new RegExp("("+ k +")").test(fmt))
      fmt = fmt.replace(RegExp.$1, (RegExp.$1.length==1) ? (o[k]) : (("00"+ o[k]).substr((""+ o[k]).length)));
  return fmt;
};

数组对象去重
//data=>要去重的数组；checkCode=>['code'],code为重复的字段
function getOnlyArr (data,checkCode) {
  // console.log(data)
  if(Array.isArray(data)){
    let arrOnly = [];
    if(data.length > 0){
      for(let i = 0;i < data.length;i++){
        let item = data[i];
        let hasAdd = false;
        //如果去重数组中值为对象
        // console.log(typeof(item))
        if(typeof(item) === 'object'){
          for(let j = 0;j < arrOnly.length;j++){
            let itemOnly = arrOnly[j];
            let allSame = true;
            for(let m = 0;m<checkCode.length;m++){
              let v = checkCode[m];
              if(item[v] !== itemOnly[v]){
                allSame = false;
                break;
              }
            }
            if(allSame){
              hasAdd = true;
              break;
            }else{
              hasAdd = false;
            }
          }
        } //如果去重数组中值为字符串
        else if(typeof(item) === 'string'){
          hasAdd = arrOnly.includes(item);
        }

        if(!hasAdd){
          arrOnly.push(item)
        }
      }
      // console.log(arrOnly)
      return arrOnly;
    }else{
      return data;
    }
  }
};

检测数组中是否有相同元素
function isRepeat(arr){
      var hash ={};
      for(var i in arr){
        if(hash[arr[i]]){
          return true
        }
        hash[arr[i]] = true;
      }
      return false;
  }

  根据年月日判断是一年里的第几周 第一天为周一
GetWeekIndex(dateobj) {
          var firstDay = this.GetFirstWeekBegDay(dateobj.getFullYear());
          if (dateobj < firstDay) {
              firstDay = this.GetFirstWeekBegDay(dateobj.getFullYear() - 1);
          }
          let d = Math.floor((dateobj.valueOf() - firstDay.valueOf()) / 86400000);
          //document.write(dateobj.getYear() + "/" + (dateobj.getMonth()+1) + "/" + dateobj.getDate()  + " 第" + (Math.floor(d / 7) + 1) + "周"+"<br/>");
          return Math.floor(d / 7) + 1;
      },
       GetFirstWeekBegDay(year) {
          var tempdate = new Date(year, 0, 1);
          var temp = tempdate.getDay();
          if (temp == 1)
              return tempdate;
          temp = temp == 0 ? 7 : temp;
          tempdate = tempdate.setDate(tempdate.getDate() + (8 - temp));
          return new Date(tempdate);
      },

//type(d:天,w:周,m:月,y:年),num:数量 date:日期
getDatePrev(type,num,date){
        var time = '';
        date = new Date(date);
        if(type === 'd'){
            time = this.$getDate(1,date.getTime() - num * 24 *60 *60 * 1000);
        }else if(type === 'w'){
            time = this.$getDate(1,date.getTime() - num * 7 * 24 *60 *60 * 1000);
        }else if(type === 'm'){
            time = this.$getDate(1,date.getTime() - num * 30 * 24 *60 *60 * 1000);
        }else if(type === 'y'){
            let year = date.getFullYear();
            let month =date.getMonth();
            let day = date.getDate();
            year = new Date(date.setFullYear(year-num)).getFullYear();
            time = this.$getDate(1,new Date(year,month,day));
        }
        return time;
    },


//一级数组对象，根据key值组合多级
//[{code1:'',code2''}]=>{code1:{code2:{code1:'',code2''}}}
//[{code1:'',code2''}]=>[{code:'',children:[{code1:'',code2''}]}]
//arrData:数组数据，arrCode:分级字段数组可多级
export function CascadeArr(arrData,arrCode) {
  let arrResult = [];
  let arrCodeObj = {};
  // console.log(JSON.parse(JSON.stringify(arrData)))
  // console.log(JSON.parse(JSON.stringify(arrCode)))
  for(let i = 0;i < arrData.length;i++){
    let item = arrData[i];
    for(let j = 0;j < arrCode.length;j++){
      getCodeCascade(arrCodeObj,0,j,arrCode.length-1);
    }
    //obj传入的每一级对象，
    // idx:分级数组code每一级都要从第一级开始循环添加，
    // idxlen:分级数组code下标（当前级别递归循环次数）,
    // alllen:分级数组code长度（一共多少级）,
    function getCodeCascade(obj, idx, idxlen,alllen) {
      if(idx < idxlen){
        if(!obj.hasOwnProperty(item[arrCode[idx]])){
          obj[item[arrCode[idx]]] = {};
        }
        getCodeCascade(obj[item[arrCode[idx]]],idx+1,idxlen,alllen);
      }else{
        if(idx === idxlen&&idx === alllen){
          if(!obj.hasOwnProperty(item[arrCode[idx]])){
            obj[item[arrCode[idx]]] = [];
          }

          obj[item[arrCode[idx]]].push(item);
        }else{
          if(!obj.hasOwnProperty(item[arrCode[idx]])){
            obj[item[arrCode[idx]]] = {};
          }
        }
      }
    }
  }
  // console.log(JSON.parse(JSON.stringify(arrCodeObj)))
  let arrCellWidth = [];//设置列宽所用数据element ui table 用来设置列宽
  //通过层级对象数据，获取层级数组
  let getCascadeArr = (objOrigin,level,parent) => {
    for(let k in objOrigin){
      let objItem = objOrigin[k];
      let obj = {
        id:this.$getGuid(),
        level:`${parseFloat(level)+1}`,
        children:[],
      };
      obj[arrCode[level]] = k;
      // console.log(JSON.parse(JSON.stringify(objItem)))
      // console.log(JSON.parse(JSON.stringify(obj)))
      if(!Array.isArray(objItem)){
        if(parent){
          parent.children.push(obj);
        }
        getCascadeArr(objItem,parseFloat(level)+1,obj);
      }else{
        if(parent){
          let lastLevel = {
            id:this.$getGuid(),
            level:`${parseFloat(level)+1}`,
            children:[],
          };

          for(let l = 0;l < objItem.length;l++){
            let lastItem = objItem[l];
            if(!lastLevel.hasOwnProperty(arrCode[level])){
              lastLevel[arrCode[level]] = lastItem[arrCode[level]];
            }
            // let findIdx = lastLevel.children.findIndex(val=>{
            //   return val[arrCode[level]] === lastItem[arrCode[level]];
            // });
            lastItem = {
              id:this.$getGuid(),
              level:`${parseFloat(level)+2}`,
              ...objItem[l],
            };
            lastLevel.children.push(lastItem);
            arrCellWidth.push(lastItem);
          }
          // console.log(JSON.parse(JSON.stringify(lastLevel)))
          // console.log(JSON.parse(JSON.stringify(parent.children)))
          parent.children.push(lastLevel);
          arrCellWidth.push(lastLevel);
        }else{
          if(arrCode.length === 1){
            obj['children'] = objItem;
          }
        }
      }
      arrCellWidth.push(obj);
      if(level === 0){
        arrResult.push(obj);
      }
    }
  };
  getCascadeArr(arrCodeObj,0);

  // console.log(JSON.parse(JSON.stringify(arrResult)))
  return {CascadeObj:arrCodeObj,CascadeArr:arrResult,arrCellWidth:arrCellWidth};
}

//多级转一级对象中有children的数组，一级一级嵌套的多级转为一级
//参数data:{code1:'',code2:'',children:[{code3:'',code4:'',children:[{},{},{}]},{},{}]}
//返回值为数组[{code1:'',code2:'',code3:'',code4:'',...}]
export function MultiToOne(data,item) {
  let checkList = [];
  let getOne = function (data,item) {
    let objItem = item||{};
    let {children,...others} = data;
    objItem = {
      ...objItem,
      ...others,
    };
    if(typeof data === 'object'&&data.hasOwnProperty('children')){
      for(let i = 0;i < data.children.length;i++){
        getOne(data.children[i],objItem);
      }
    }else{
      checkList.push(objItem);
    }
  };
  getOne(data);
  return checkList;
}


正则表达式
1. [] 可以匹配括号内任意字符
例:
str1  = 'acb '
str1 = "acb azb abb a6b aab"

result1 = re.findall("a[a-z]b",str1) //['acb','azb','abb','aab']
result2 = re.findall("a[0-9]b",str1) //['a6b']
result3 = re.findall("a[za6]b",str1)//['azb','a6b','aab']

代码解释:不管是①②③，表示匹配开头是a，末尾是b。唯一不同的就是[ ]符号中匹配值不同。

2. | 或运算符,用于匹配符号前或符号后的字符
例:
str2 = "我是孙悟空，您可以称呼我为齐天大圣！"
result1 = re.findall("孙悟空|齐天大圣",str2)//['孙悟空','齐天大圣']

代码解释:要么匹配孙悟空，要么匹配齐天大圣

3.^ 乘方符号,表示以....开头  $ 美元符号 表示以....结尾
str6 = "你来自哪里？我来自湖北省"

result7 = re.findall("^你",str6)//['你']
result8 = re.findall("^来",str6)//[]

result9 = re.findall("省$",str6)//['省]
result10 = re.findall("湖北$",str6)//[]

代码解释：一个用于匹配开头，一个用于匹配结尾。只有开头或结尾与要匹配的值一致，才能被匹配到。

4. . 点号 匹配任意单个字符(除换行字符以外) ? 问号表示匹配前面一个字符最多一次
例
str6 = "abcdaabb"

result10 = re.findall("a.b",str7) ①//['abb']
result11 = re.findall("a*b",str7) ②//['ab','aab','b']
result12 = re.findall("a?b",str7) ③//['ab','ab','b']

result13 = re.findall("a.*b",str7) ④//['abcdaabb']
result14 = re.findall("a.*?b",str7) ⑤//['ab','aab']

代码解释：点号一般与*号和?号搭配使用。仔细观察①-⑤处的正则表达式，开头和结尾都是a、b，唯一不同的就是它们之间的符号。

①处点号表示匹配（除了换行符）任意单个字符。因此，只要开头是a，结尾是b，中间是任何一个单个字符，都会被匹配上。
②处*号表示匹配前面一个字符0或多次，在这里 * 号前面是a。因此，只要结尾是b，前面是>=0个a的值，都会被匹配上。
③处?号表示匹配前面一个字符最多一次，在这里 * 号前面是a。因此，前面是大于等于0、小于等于1个a的值，都会被匹配上。
④.*组合 ，称为“贪婪匹配”，是因为它会匹配到尽可能多的内容。原本开头是a，那么只要找到b，就是一个返回值。但是贪婪匹配不这样，它会一直朝后面走，直到找到最后一个b才肯罢休，然后返回一个超级长的字符串。
⑤.*?组合 ，称为“非贪婪匹配”，就是为了制止贪婪匹配而生的。它不贪得无厌，只要开头是a，你后面不是想要b吗，我碰到第一个就给你返回了。

5.() 组,可以匹配括号内表达式,括号内每个字符是and的含义
str8 = "a321b木头人c"

result15 = re.findall("a(\d+)b([\u4e00-\u9fa5]+)c",str8)//['321','木头人']

代码解释：()表示一个组，只要是()中的内容，最后都会被返回。

6. \d 匹配一个数字字符,等价于[0-9]   \D 匹配一个非数字字符,等价于[^0-9]
例:
str1 = "123\n黄同学@#%嘻嘻\t"

result1 = re.findall("\d",str1)//['1','2','3']
result2 = re.findall("\D",str1)//['\n','黄','同','学','@','#','%','嘻','嘻','\t']

代码解释：\d仅匹配数字，\D用于匹配非数字，很好理解。

7. \s 匹配任何空白字符,包括空格、制表符、换页符等，等价于[\f\n\r\t\v]  \S 匹配任何非空白字符，等价于[^\f\n\r\t\v]
例
tr2 = "\r123\n黄同学@#%嘻嘻\t"

result3 = re.findall("\s",str2)//['\r','\n','\t']
result4 = re.findall("\S",str2)//['1','2','3','黄','同','学','@','#','%','嘻','嘻']

代码解释：\s仅匹配空白字符，\S用于匹配非空白字符（这个更常用）。

8. \w 匹配包括下划线的任何单词字符。等价于[A-Za-z0-9_]  \W 匹配任何非单词字符，等价于[^A-Za-z0-9_]
str3 = "\r123\n黄同学_@#%嘻嘻\t"

result5 = re.findall("\w",str3)//['1','2','3','黄','同','学','_','嘻','嘻']
result6 = re.findall("\W",str3)//['\r','\n','@','#','%','\t']

代码解释：\w相当于[A-Za-Z0-9_]，超好用（值得注意），\W匹配非单词字符，了解即可。

scss @for 写法
scss
@for $i from 1 through 4 {
  .checkList-itemcheck{
    overflow: auto;
    @if($i==1){
      word-wrap: break-word;
    }@else{
      background-color: yellow;
    }
  }
}
编译后css
.checkList-itemcheck {
  overflow: auto;
  word-wrap: break-word;
}

.checkList-itemcheck {
  overflow: auto;
  background-color: yellow;
}

.checkList-itemcheck {
  overflow: auto;
  background-color: yellow;
}

.checkList-itemcheck {
  overflow: auto;
  background-color: yellow;
}

webpack 配置信息
一.entry 入口起点(入口文件配置项,可以为字符串,数组,对象.)
支持三种格式
1.string:单入口
entry:"./src/index.js"
注:打包形成一个chunk,输出一个bundle文件,此时chunk名称默认为main

2.array:多入口
entry:["./src/index.js","./src/add.js"]
注:所有入口文件最终形成一个chunk,输出一个bundle文件,此时chunk名称默认为main(会将add.js打包进index.js)

3.object:多入口
entry:{
	index:"./src/index.js",
	add:"./src/add.js"
}
注:几个入口文件几个一个chunk,并输出几个bundle文件,chunk名称是key(index,add)
特殊用法:多个入口且将多个文件打包成一个chunk
entry:{
	index:["./src/index.js","./src/count.js"],
	add:"./src/add.js"
}

二.output 用于告知webpack如何构建编译后的文件,,可自定义输出文件的位置和名称
1.单入口时output写法
output:{
//path必须为绝对路径
//输出文件路劲
path:path.resolve(_dirname,'./dist/mobile')

//包名称
filename:"bundle.js",
//或使用函数返回名(不常用)
//filename:(chunkData)=>{
// return chunkData.chunk.name === 'main'?'[name].js':'[name]/[name].js'
//}

//块名称,公共快名(非入口)
chunkFilename:'[name].[chunkhash].bundle.js'

//打包生成的index.html文件里面引用资源前缀
//也为发布到线上资源URL前缀
//使用的是相对路径,默认为''
publicPath:'/'
}

2.多入口时output写法 (filename的值使用占位符写法)
output:{
//path必须为绝对路径
//输出文件路劲
path:path.resolve(_dirname,'./dist/mobile')

//包名称
filename:"[name].js",
//或使用函数返回名(不常用)
//filename:(chunkData)=>{
// return chunkData.chunk.name === 'main'?'[name].js':'[name]/[name].js'
//}

//块名称,公共快名(非入口)
chunkFilename:'[name].[chunkhash].bundle.js'

//打包生成的index.html文件里面引用资源前缀
//也为发布到线上资源URL前缀
//使用的是相对路径,默认为''
publicPath:'/'
}

三.module配置 决定如何处理项目中的不同类型的模块
1.rules
作用:条件匹配,用于匹配加载器,指定模块解析规则(css、js、vue、图片文件等)
使用方式:(使用use加载,使用loader加载)
rules:[
	{//方式一
		test: /\.css$/,
		use: ['style-loader','css-loader','postcss-loader']
	}
	{//方式二
		test: /\.s[a|c]ss/,
		use: ['style-loader','css-loader','postcss-loader']
	}
	
	
]
rules是一个数组,指定加载多个Rule,Rule当中的loader是use中loader的简写.上述可变更为
rules:[
	{
		test:/\.css$/,
		use:[
			{
				loader:"style-loader"
			},
			{
				loader:"css-loader"
			}
		]
	}
]

其余参数
include:目录名,可以是字符串、数组,表示哪些目录下某些文件需要解析
exclude:目录名，可以是字符串、数组,表示哪些目录下某些文件不需要解析
enforce:pre->把该loader的执行顺序放到最前面，post->把该loader的执行顺序放到最后面
parser:配置哪些模块语法需要解析哪些不解析(amd、commonjs、system、harmony、requireInclude、requireEnsure、requireContext、browserify、browserify、requireJs--true/false)
优先级：exclude>include>test

2.loaders
作用：与rules一致，用于解析模块
使用方式和rules一样
loaders:[
	{//方式一
		test:/\.css$/,
		loader:['style-loader','css-loader']
	},
	{
		test: /\.s[a|c]ss/,
		loader:'style-loader!css-loader!sass-loader'
	}
]
loader的解析原理：从左往右，从上往下

四.resolve 解析模块规则
1.resolve.alias 配置项通过别名来把原导入路径映射成一个新的导入路径。例如使用以下配置：
resolve:{
	alias:{
		'@': path.resolve(__dirname, 'src'),
	}
}
这样在js文件中引用是可简写文件路径
import main from '@/main.js'

2.resolve.extensions 配置省略文件路径的后缀名
resolve:{
	//配置省略文件路径的后缀名
	extensions:['.js','.json','.jsx','.css']
}
这样在js文件中引用是可省略后缀名 (不推荐使用，如同一个目录有不同类型的同名文件，只会匹配第一个)
import main from '@/main'

五.pulgin 插件
一般情况下pulgin的配置都是通过webpack.config.js配置文件导出对象中plugins属性传入new实例对象
// 输出html
const HtmlWebpackPlugin = require('html-webpack-plugin')//通过npm安装
const webpack = require('webpack')//访问内置插件
module.exports = {
	...
	//配置plugins
	plugin:[
		new webpack.ProgressPlugin(),
		new HtmlWebpackPlugin({
			title: '华会',
			filename: 'index.html',//指定生成的HTML文件名
			template: path.join(__dirname, './public/index.html') // 指定模板路径
		})
	]
}

常见的 pulgin
html-webpack-plugin 插件自动生成 html 文件，并且对打包后的 js 文件做了一个引入
clean-webpack-plugin 每次打包时候，CleanWebpackPlugin 插件就会自动把上一次打的包删除
mini-css-extract-plugin 提取 CSS 到一个单独的文件中
DefinePlugin DefinePlugin 允许在编译时创建配置的全局常量，是一个 webpack 内置的插件（不需要单独安装）
copy-webpack-plugin CopyWebpackPlugin 是一个复制文件的插件，复制文件或者目录到指定区域，比如 vue 的打包过程中，如果我们将一些文件放到 public 的目录下，那么这个目录会被复制到 dist 文件夹中

六.mode 模式 webpack提供mode配置选项，告知webpack使用相应模式的内置优化
module.exports={
	//mode指定构建模式 development 开发模式 production生成模式
	mode:'production'//development
}
1.development
会将 process.env.NODE_ENV 的值设为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin
module.exports = {
  mode: 'development'
  plugins: [
   new webpack.NamedModulesPlugin(),
   new webpack.DefinePlugin({ "process.env.NODE_ENV": JSON.stringify("development") }),
 ]
}

2.production
会将 process.env.NODE_ENV 的值设为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 UglifyJsPlugin.
module.exports = {
  mode: 'production',
  plugins: [
   new UglifyJsPlugin(/* ... */),
   new webpack.DefinePlugin({ "process.env.NODE_ENV": JSON.stringify("production") }),
   new webpack.optimize.ModuleConcatenationPlugin(),
   new webpack.NoEmitOnErrorsPlugin()
  ]
}

production模式下会启用UglifyJsPlugin插件（移除未使用的内容和文件压缩），分别用production和development打包，编译的区别：

1.development打包后，一些没有依赖的方法 变量 文件会保留，production则会移除。

2.production打包后，代码会进行压缩，比development的文件小。


防抖
//fn 触发的方法
//delay 时间
debounce(fn,delay){
  let time = null;
  return function (){
    if(time!==null){
      clearTimeout(time);
    }
    time = setTimeout(()=>{
      fn.call()
    },delay)
  }
}

axios
创建请求时可用配置选项,只有URL是必须的,如果method未指定,默认使用为get方法
{
	// `url` 是用于请求的服务器 URL
	url: '/user',
	
	// `method` 是创建请求时使用的方法
	method: 'get', // default
	
	// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。
	// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL
	baseURL: 'https://some-domain.com/api/',
	
	// `transformRequest` 允许在向服务器发送前，修改请求数据
	// 只能用在 'PUT', 'POST' 和 'PATCH' 这几个请求方法
	// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream
	transformRequest: [function (data, headers) {
		// 对 data 进行任意转换处理
		return data;
	}],
	
	// `transformResponse` 在传递给 then/catch 前，允许修改响应数据
	transformResponse: [function (data) {
		// 对 data 进行任意转换处理
		return data;
	}],
	
	// `headers` 是即将被发送的自定义请求头
	headers: {'X-Requested-With': 'XMLHttpRequest'},
	
	// `params` 是即将与请求一起发送的 URL 参数
	// 必须是一个无格式对象(plain object)或 URLSearchParams 对象
	params: {
		ID: 12345
	},
	
	// `paramsSerializer` 是一个负责 `params` 序列化的函数
	// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)
	paramsSerializer: function(params) {
		return Qs.stringify(params, {arrayFormat: 'brackets'})
	},
	
	// `data` 是作为请求主体被发送的数据
	// 只适用于这些请求方法 'PUT', 'POST', 和 'PATCH'
	// 在没有设置 `transformRequest` 时，必须是以下类型之一：
	// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams
	// - 浏览器专属：FormData, File, Blob
	// - Node 专属： Stream
	data: {
		firstName: 'Fred'
	},
	
	// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)
	// 如果请求话费了超过 `timeout` 的时间，请求将被中断
	timeout: 1000,

	// `withCredentials` 表示跨域请求时是否需要使用凭证
	withCredentials: false, // default
	
	// `adapter` 允许自定义处理请求，以使测试更轻松
	// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).
	adapter: function (config) {
		/* ... */
	},
	
	// `auth` 表示应该使用 HTTP 基础验证，并提供凭据
	// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头
	auth: {
		username: 'janedoe',
		password: 's00pers3cret'
	},
	
	// `responseType` 表示服务器响应的数据类型，可以是 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'
	responseType: 'json', // default
	
	// `responseEncoding` indicates encoding to use for decoding responses
	// Note: Ignored for `responseType` of 'stream' or client-side requests
	responseEncoding: 'utf8', // default
	
	// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称
	xsrfCookieName: 'XSRF-TOKEN', // default
	
	// `xsrfHeaderName` is the name of the http header that carries the xsrf token value
	xsrfHeaderName: 'X-XSRF-TOKEN', // default
	
	// `onUploadProgress` 允许为上传处理进度事件
	onUploadProgress: function (progressEvent) {
		// Do whatever you want with the native progress event
	},
	
	 // `onDownloadProgress` 允许为下载处理进度事件
	onDownloadProgress: function (progressEvent) {
		// 对原生进度事件的处理
	},
	
	// `maxContentLength` 定义允许的响应内容的最大尺寸
	maxContentLength: 2000,

	// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte
	validateStatus: function (status) {
		return status >= 200 && status < 300; // default
	},
	
	// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目
	// 如果设置为0，将不会 follow 任何重定向
	maxRedirects: 5, // default
	
	// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：
	// `keepAlive` 默认没有启用
	httpAgent: new http.Agent({ keepAlive: true }),
	httpsAgent: new https.Agent({ keepAlive: true }),
	
	// 'proxy' 定义代理服务器的主机名称和端口
	// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据
	// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。
	proxy: {
		host: '127.0.0.1',
		port: 9000,
		auth: {
		username: 'mikeymike',
		password: 'rapunz3l'
		}
	},
	
	// `cancelToken` 指定用于取消请求的 cancel token
	// （查看后面的 Cancellation 这节了解更多）
	cancelToken: new CancelToken(function (cancel) {
	})
}

响应结构
{
	// `data` 由服务器提供的响应
	data: {},

	// `status` 来自服务器响应的 HTTP 状态码
	status: 200,

	// `statusText` 来自服务器响应的 HTTP 状态信息
	statusText: 'OK',

	// `headers` 服务器响应的头
	headers: {},

	// `config` 是为请求提供的配置信息
	config: {},
	// 'request'
	// `request` is the request that generated this response
	// It is the last ClientRequest instance in node.js (in redirects)
	// and an XMLHttpRequest instance the browser
	request: {}
}

拦截器
// 添加请求拦截器
axios.interceptors.request.use(function (config) {
    // 在发送请求之前做些什么
    return config;
  }, function (error) {
    // 对请求错误做些什么
    return Promise.reject(error);
  });

// 添加响应拦截器
axios.interceptors.response.use(function (response) {
    // 对响应数据做点什么
    return response;
  }, function (error) {
    // 对响应错误做点什么
    return Promise.reject(error);
  });
  

移除拦截器
const myInterceptor = axios.interceptors.request.use(function () {/*...*/});
axios.interceptors.request.eject(myInterceptor);

